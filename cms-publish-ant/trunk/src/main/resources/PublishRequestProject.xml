<?xml version="1.0" encoding="utf-8"?>
<!--

    Copyright (C) 2009-2013 Simonsoft Nordic AB

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<!-- 
	This ANT Build is specific for publishing VSM Project files in one language.
-->
<project name="PublishRequest" basedir="." default="run">

	<taskdef name="publishrequest" classname="se.simonsoft.cms.publish.ant.PublishRequestPETask" />
	<taskdef name="publishreport" classname="se.simonsoft.cms.publish.ant.tasks.ErrorReportTask" />
	<!-- Support for antcontrib. Must be present in Ant Lib or otherwise specified by classpath -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" />	

	<!-- Some default properties -->
	<property name="lang" value="en-US" />
	<property name="param.file-type" value="xml" />
	<property name="param.type" value="xml" />
	<property name="param.profile" value="" />
	<property name="param.app-config" value="" />
	<property name="param.stylesheet" value="" />
	<property name="param.zip-output" value="yes" />
	<property name="param.zip-graph-dir" value="graphics" />
	<property name="param.queue-priority" value="4" />
	<property name="param.flatten-entities" value="yes" />
	<property name="zipoutput" value="yes" />
	<property name="zip-root-filename" value="${filename}.xml" />

	<!-- We use a lower priority so other requests should be able to pass -->
	<property name="outputfolder" value="workspace/export" />
	<property name="e3defaultfilename" value="e3out.xml" />

	<!--
	<target name="get-report">
		<getreport url="${config.host}" apiuri="${apiuri}" username="${username}" password="${password}">
			<params>
				<param name="q" value="${query}" />
				<param name="rows" value="${rows}" />
			</params>
		</getreport>
	</target>
-->
	<target name="publish" description="Publish an item">

		<publishrequest outputfolder="${outputfolder}">

			<!-- Should perhaps also have config for port and uri -->
			<configs>
				<config name="host" value="${config.host}" />
			</configs>

			<jobs>
				<!-- Each job specifies the params for a publish request -->

				<job filename="${filename}" zipoutput="${zipoutput}" rootfilename="${zip-root-filename}">
					<params>
						<param name="profile" value="${param.profile}" />
						<param name="app-config" value="${param.app-config}" />
						<param name="stylesheet" value="${param.stylesheet}" />
						<param name="file" value="${param.file}" />
						<param name="file-type" value="${param.file-type}" />
						<param name="zip-output" value="${param.zip-output}" />
						<param name="zip-graph-dir" value="${param.zip-graph-dir}" />
						<param name="graphic-transform" value="${param.graphic-transform}" />
						<param name="type" value="${param.type}" />
						<param name="queue-priority" value="${param.queue-priority}" />
						<param name="flatten-entities" value="${param.flatten-entities}" />
					</params>
				</job>
			</jobs>
		</publishrequest>

		<condition property="unpack">
			<length file="${outputfolder}/${filename}.zip" when="greater" length="0" />
		</condition>
	</target>

	<!-- We could assume that each project publish request demands a zip, 
	 	but just to make sure we check for param.zip-putput -->
	<target name="unarchive" if="unpack">
		<unzip failOnEmptyArchive="false" src="${outputfolder}/${filename}.zip" dest="${outputfolder}/${filename}" />
		<delete failonerror="false" file="${outputfolder}/${filename}.zip" />
	</target>

	<target name="rename-icon-file">
		<!-- Create a list of files to rename -->
		<xslt style="createfilelist.xsl" in="${outputfolder}/${filename}/${e3defaultfilename}" out="${outputfolder}/filelist.txt">
			<param name="graphicsdir" expression="${param.zip-graph-dir}"/>
			<factory name="net.sf.saxon.TransformerFactoryImpl">
				<attribute name="http://saxon.sf.net/feature/version-warning" value="false" />
			</factory>
		</xslt>
		<!-- load this file into a property -->
		<loadfile property="textFile" srcfile="${outputfolder}/filelist.txt" />
		
		<!-- Using ant contrib for loop, get each value and then rename the file -->
		<for param="line" list="${textFile}" delimiter="${line.separator}">
			<sequential>
				<propertyregex property="sewablefile" input="@{line}" regexp="(.+):" select="\1" override="true" casesensitive="false" />
				<propertyregex property="iconfile" input="@{line}" regexp=":(.+)" select="\1" override="true" casesensitive="false" />
				<propertyregex property="sewablefile.name" input="${sewablefile}" regexp="(.*)\.(.*)" select="\1" override="true" />
				<!--
				<echo message="Sewablefile; ${sewablefile}"/>
				<echo message="Iconfile: ${iconfile}"/>
				<echo message="Sewable file name: ${sewablefile.name}"/>
				-->
				<move file="${outputfolder}/${filename}/${param.zip-graph-dir}/${iconfile}" 
					tofile="${outputfolder}/${filename}/${param.zip-graph-dir}/${sewablefile.name}.png" 
					failonerror="false"/>
			</sequential>
		</for>
		<delete failonerror="false" file="${outputfolder}/filelist.txt"/>
	</target>

	<target name="perform-transform">
		<xslt style="techdoc_to_machine.xsl" in="${outputfolder}/${filename}/${e3defaultfilename}" out="${outputfolder}/${filename}/project.xml">
			<factory name="net.sf.saxon.TransformerFactoryImpl">
				<attribute name="http://saxon.sf.net/feature/version-warning" value="false" />
			</factory>
		</xslt>
		<delete failonerror="false" file="${outputfolder}/${filename}/${e3defaultfilename}" />
	</target>

	<!-- We could assume that we always want a tar -->
	<target name="archive">
		<tar basedir="${outputfolder}/${filename}" destfile="${outputfolder}/${filename}.tar" />
		<move failonerror="false" file="${outputfolder}/${filename}.tar" tofile="${outputfolder}/${filename}.jos" />
		<delete failonerror="false" dir="${outputfolder}/${filename}" />
		<delete failonerror="false" dir="${outputfolder}/${filename}.tar" />
	</target>

	<target name="publish-report">
		<publishreport />
		<condition property="errors">
			<length file="${outputfolder}/errors.log" when="greater" length="0" />
		</condition>
	</target>

	<target name="run" depends="publish, publish-report, unarchive,rename-icon-file,perform-transform, archive" />

</project>