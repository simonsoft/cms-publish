<?xml version="1.0" encoding="utf-8"?>
<!--

    Copyright (C) 2009-2013 Simonsoft Nordic AB

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project name="PublishSelectedItems" basedir="." default="run">
	<!-- 
		Publishes each XML file by searching for it's pathname: name.xml
		The input list of files is separated by comma.
		Can publish ANY file in CMS
	 -->
	<taskdef name="publishreport" classname="se.simonsoft.cms.publish.ant.tasks.PublishReportTask" />
	<taskdef name="publishrequest" classname="se.simonsoft.cms.publish.ant.PublishRequestPETask" />

	<!-- Support for antcontrib. Must be present in Ant Lib or otherwise specified by classpath -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" />

	<!-- Some default properties -->
	<property name="outputfolder" value="export" />
	<property name="lang" value="en-US" />
	<!-- We will basically always use xml as input format -->
	<property name="param.file-type" value="xml" />

	<property name="param.queue-priority" value="4" />
	<!-- We use a lower priority so other requests should be able to pass -->

	<property name="e3defaultxmlfilename" value="e3out.xml" />
	<property name="e3defaulthtmlfilename" value="e3out.htm" />

	<!-- Report query defaults-->
	<property name="config.username" value="report-read" />
	<property name="config.password" value="read" />
	<property name="param.rows" value="2000" />
	<property name="config.apiuri" value="/cms/rest/report/items" />
	<!-- Not used in CMS 3.2 with reporting 1.2.2 -->
	<property name="param.fields" value="" />
	<property name="param.repo" value="" />
	<property name="prevhead" value="" />

	<!-- query examples
		Using timestamp:
		t:[2014-09-19T23:59:59.999Z TO *] AND head:true AND patharea:release AND prop_cms.status:Released
		
		 -->
	<!-- Builds the query for each item in items property and then calls publish-report -->
	<target name="publish-selected">
		<for list="${items}" delimiter="," param="item">
			<sequential>
				
				<propertyregex property="itemstripped" input="@{item}" regexp=" " replace="" override="true" global="true"/>
				
				<condition property="itemstripped-or-orig" else="@{item}">
					<isset property="itemstripped"/>
				</condition>
				
				<antcall target="publish-report">
					<param name="query" value="pathname:@{item}.xml AND (pathpart:td-spec-cur OR pathpart:non-thg-swe) AND head:true" />
				</antcall>
			</sequential>
		</for>
	</target>

	<!-- Publishes the result of report result by requesting report result and then call publish task -->
	<target name="publish-report">
		<!--<property name="param.query" value="rev:[${prevhead} TO *] AND (pathpart:td-spec-cur OR pathpart:non-thg-swe) AND head:true" /> -->
		<!-- filter has to be FQ class name -->
		<publishreport filter="se.simonsoft.cms.publish.ant.filters.TechSpecFilter" target="publish">
			<!-- Add properties to set in publish target -->
			<configs>
				<config name="baseurl" value="${config.host}" />
				<config name="username" value="${config.username}" />
				<config name="password" value="${config.password}" />
				<config name="version" value="v32" />
				<config name="target" value="publish" />
				<!-- Name of the publish target to call-->
			</configs>
			<!-- Query params  -->
			<params>
				<param name="q" value="${query}" />
				<param name="repo" value="${param.repo}" />
				<param name="fl" value="${param.fields}" />
				<param name="rows" value="${param.rows}" />
			</params>
		</publishreport>
	</target>

	<target name="publish" description="Publish an item">

		<publishrequest outputfolder="${outputfolder}">

			<!-- Should perhaps also have config for port and uri -->
			<configs>
				<config name="host" value="${config.host}" />
			</configs>

			<jobs>
				<!-- Each job specifies the params for a publish request -->

				<job filename="${filename}-${lang}.html_temp" zipoutput="no" rootfilename="${filename}-${lang}.html">
					<params>
						<param name="profile" value="logicalexpression=&lt;ProfileRef alias=&quot;Features&quot; value=&quot;External&quot;/&gt;" />
						<param name="stylesheet" value="$aptpath/application/se.simonsoft.flir/doctypes/FLIR/flir_technote_A4.style" />
						<param name="file" value="${param.file}" />
						<param name="file-type" value="${param.file-type}" />
						<param name="zip-output" value="yes" />
						<param name="zip-graph-dir" value="${filename}-${lang}.html_files" />
						<param name="graphic-transform" value="pdf:-|eps,jpg,png,tif:jpg" />
						<param name="type" value="html" />
						<param name="queue-priority" value="${param.queue-priority}" />
					</params>
				</job>

				<job filename="${filename}-${lang}_A4.pdf">
					<params>
						<param name="profile" value="logicalexpression=&lt;ProfileRef alias=&quot;Features&quot; value=&quot;External&quot;/&gt;" />
						<param name="app-config" value="$aptpath/application/se.simonsoft.flir/app/standard.3sppdf" />
						<param name="stylesheet" value="$aptpath/application/se.simonsoft.flir/doctypes/FLIR/flir_technote_A4.style" />
						<param name="file" value="${param.file}" />
						<param name="file-type" value="${param.file-type}" />
						<param name="type" value="pdf" />
						<param name="queue-priority" value="${param.queue-priority}" />
					</params>
				</job>

				<job filename="${filename}-${lang}_html.zip" zipoutput="yes" rootfilename="${filename}-${lang}.html">
					<params>
						<param name="profile" value="logicalexpression=&lt;ProfileRef alias=&quot;Features&quot; value=&quot;External&quot;/&gt;" />
						<param name="stylesheet" value="$aptpath/application/se.simonsoft.flir/doctypes/FLIR/flir_technote_letter.style" />
						<param name="file" value="${param.file}" />
						<param name="file-type" value="${param.file-type}" />
						<param name="zip-output" value="yes" />
						<param name="zip-graph-dir" value="${filename}-${lang}.html_files" />
						<param name="graphic-transform" value="pdf:-|eps,jpg,png,tif:jpg" />
						<param name="type" value="html" />
						<param name="queue-priority" value="${param.queue-priority}" />
					</params>
				</job>

				<job filename="${filename}-${lang}.rtf">
					<params>
						<param name="profile" value="logicalexpression=&lt;ProfileRef alias=&quot;Features&quot; value=&quot;External&quot;/&gt;" />
						<param name="stylesheet" value="$aptpath/application/se.simonsoft.flir/doctypes/FLIR/flir_technote_A4.style" />
						<param name="file" value="${param.file}" />
						<param name="file-type" value="${param.file-type}" />
						<param name="type" value="rtf" />
						<param name="queue-priority" value="${param.queue-priority}" />
					</params>
				</job>

				<job filename="${filename}-${lang}_xml_temp" zipoutput="yes" rootfilename="${filename}-${lang}.xml">
					<params>
						<param name="profile" value="logicalexpression=&lt;ProfileRef alias=&quot;Features&quot; value=&quot;External&quot;/&gt;" />
						<param name="file" value="${param.file}" />
						<param name="file-type" value="${param.file-type}" />
						<param name="zip-output" value="yes" />
						<param name="zip-graph-dir" value="${filename}-${lang}.xml_files" />
						<param name="type" value="xml" />
						<param name="queue-priority" value="${param.queue-priority}" />
					</params>
				</job>

				<job filename="${filename}-${lang}_A4.pdf">
					<params>
						<param name="profile" value="logicalexpression=&lt;ProfileRef alias=&quot;Features&quot; value=&quot;External&quot;/&gt;" />
						<param name="app-config" value="$aptpath/application/se.simonsoft.flir/app/standard.3sppdf" />
						<param name="stylesheet" value="$aptpath/application/se.simonsoft.flir/doctypes/FLIR/flir_technote_A4.style" />
						<param name="file" value="${param.file}" />
						<param name="file-type" value="${param.file-type}" />
						<param name="type" value="pdf" />
						<param name="queue-priority" value="${param.queue-priority}" />
					</params>
				</job>


			</jobs>
		</publishrequest>

		<!-- File management: Make sure we don't work with empty files (this is an extra precaution)-->

		<condition property="make-html-unzip">
			<length file="${outputfolder}/${filename}-${lang}.html_temp.zip" when="greater" length="0" />
		</condition>

		<condition property="make-html-zip">
			<length file="${outputfolder}/${filename}-${lang}_html.zip" when="greater" length="0" />
		</condition>

		<condition property="make-xml-zip">
			<length file="${outputfolder}/${filename}-${lang}_xml_temp.zip" when="greater" length="0" />
		</condition>

		<!-- Call our package tasks-->
		<antcall target="packageunzippedhtml" />
		<antcall target="packagezippedhtml" />
		<antcall target="packagezippedxml" />

	</target>

	<!-- Package tasks begins -->
	<target name="packageunzippedhtml" if="make-html-unzip">
		<unzip failOnEmptyArchive="false" src="${outputfolder}/${filename}-${lang}.html_temp.zip" dest="${outputfolder}" />
		<move failonerror="false" file="${outputfolder}/${e3defaulthtmlfilename}" tofile="${outputfolder}/${filename}-${lang}.html" />
		<delete failonerror="false" file="${outputfolder}/${filename}-${lang}.html_temp.zip" />
	</target>

	<target name="packagezippedhtml" if="make-html-zip">
		<unzip failOnEmptyArchive="false" src="${outputfolder}/${filename}-${lang}_html.zip" dest="${outputfolder}/${filename}-${lang}_html_temp" />
		<delete file="${outputfolder}/${filename}-${lang}.html.zip" />
		<move failonerror="false" file="${outputfolder}/${filename}-${lang}_html_temp/${e3defaulthtmlfilename}" tofile="${outputfolder}/${filename}-${lang}_html_temp/${filename}-${lang}.html" />
		<zip destfile="${outputfolder}/${filename}-${lang}_html.zip" basedir="${outputfolder}/${filename}-${lang}_html_temp" />
		<delete failonerror="false" dir="${outputfolder}/${filename}-${lang}_html_temp" />
	</target>

	<target name="packagezippedxml" if="make-xml-zip">
		<unzip failOnEmptyArchive="false" src="${outputfolder}/${filename}-${lang}_xml_temp.zip" dest="${outputfolder}/${filename}-${lang}_xml" />
		<delete file="${outputfolder}/${filename}-${lang}_xml_temp.zip" />
		<xslt style="stripComments.xsl" in="${outputfolder}/${filename}-${lang}_xml/${e3defaultxmlfilename}" out="${outputfolder}/${filename}-${lang}_xml/${filename}-${lang}.xml">
		</xslt>
		<!-- <move failonerror="false" file="${outputfolder}/${filename}-${lang}_xml/${e3defaultxmlfilename}" tofile="${outputfolder}/${filename}-${lang}_xml/${filename}-${lang}.xml" />
			-->
		<!-- Copy a single XML to output root -->
		<copy failonerror="false" preservelastmodified="true" file="${outputfolder}/${filename}-${lang}_xml/${filename}-${lang}.xml" tofile="${outputfolder}/${filename}-${lang}.xml" />

		<zip destfile="${outputfolder}/${filename}-${lang}_xml.zip" basedir="${outputfolder}/${filename}-${lang}_xml" />
		<delete failonerror="false" dir="${outputfolder}/${filename}-${lang}_xml" />
	</target>

	<!-- the dependency to parsereport makes sure publishing process initiates -->
	<target name="run" depends="publish-selected">
		<!-- Move files. If nothing is to be moved, a warning will output -->
		<copy failonerror="false" todir="${manualdir}" preservelastmodified="true" overwrite="true" force="true">
			<fileset dir="${outputfolder}" />
		</copy>

		<!-- Delete export -->
		<delete failonerror="false" dir="${outputfolder}" />
	</target>


</project>